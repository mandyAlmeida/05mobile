import type { __experimental_CommercePlanResource, __experimental_CommerceSubscriberType } from '@clerk/types';
import type { ComponentType, ReactNode } from 'react';
type PlansContextProviderProps = {
    subscriberType?: __experimental_CommerceSubscriberType;
};
export declare const PlansContextProvider: ({ subscriberType, children, }: PlansContextProviderProps & {
    children: ReactNode;
}) => import("@emotion/react/jsx-runtime").JSX.Element;
export declare const usePlansContext: () => {
    componentName: "Plans";
    subscriberType: __experimental_CommerceSubscriberType;
    plans: __experimental_CommercePlanResource[];
    subscriptions: import("@clerk/types").__experimental_CommerceSubscriptionResource[];
    isLoading: boolean;
    revalidate: () => void;
    activeOrUpcomingSubscription: (plan: __experimental_CommercePlanResource) => import("@clerk/types").__experimental_CommerceSubscriptionResource | undefined;
    isDefaultPlanImplicitlyActive: boolean;
};
export declare const withPlans: <T extends object>(WrappedComponent: ComponentType<T>, providerPropsFromHOC?: PlansContextProviderProps) => import("react").FC<T & {
    providerProps?: PlansContextProviderProps;
}>;
export {};
